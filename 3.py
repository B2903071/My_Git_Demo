{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a287b040-336b-4441-89f8-a09f3ad61f67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "使用时间范围: 从 2025-06-26 14:24:39 到 2025-07-26 14:24:39\n",
      "发送请求: https://api.cnyes.com/media/api/v1/newslist/category/headline\n",
      "参数: {'page': 1, 'limit': 30, 'isCategoryHeadline': 1, 'startAt': 1750919079, 'endAt': 1753511079}\n",
      "响应状态码: 200\n",
      "JSON顶级键: ['items', 'message', 'statusCode']\n",
      "获取到 30 条新闻\n",
      "列名: ['newsId', 'title', 'content', 'hasCoverPhoto', 'isIndex', 'summary', 'isCategoryHeadline', 'stock', 'video', 'payment', 'feature', 'otherProduct', 'source', 'isOutsource', 'keyword', 'is24h', 'publishAt', 'coverSrc', 'abTesting', 'categoryId', 'categoryName', 'columnists', 'fundCategoryAbbr', 'etf', 'fbShare', 'fbComment', 'fbCommentPluginCount', 'market']\n",
      "\n",
      "新闻列表预览:\n",
      "    newsId                                  title  \\\n",
      "0  6077764       李強提議建全球AI合作組織！中國籲統一AI治理、美中科技角力升溫   \n",
      "1  6077766               經濟學人：狼真的來了！加密大爆炸將顛覆金融舊秩序   \n",
      "2  6077644  ChatGPT創建者之一 趙盛佳將擔任Meta「超級智慧實驗室」首席科學家   \n",
      "3  6077607           〈財報前瞻〉華爾街估蘋果Q3營收略降 關稅、歐盟成關鍵字   \n",
      "4  6077754    產量遠不如目標？馬斯克說好年底前生產5,000台 目前只產幾百台機器人   \n",
      "\n",
      "                                             summary  \\\n",
      "0  中國總理李強於世界人工智慧大會（WAIC）提議成立全球 AI 合作組織，強調加強人工智慧治理...   \n",
      "1  探索加密貨幣世界的重大轉變！從穩定幣監管法案到資產代幣化的快速崛起，本文全面解析穩定幣與代幣...   \n",
      "2                                               None   \n",
      "3  蘋果預計將於 7 月 31 日公布 2025 會計年度第三季 (截至 6 月底) 財報。儘管...   \n",
      "4       特斯拉 (TSLA-US) 擎天柱（Optimus）機器人產量嚴重滯後，全年目標成泡影？   \n",
      "\n",
      "                                     link  \n",
      "0  https://news.cnyes.com/news/id/6077764  \n",
      "1  https://news.cnyes.com/news/id/6077766  \n",
      "2  https://news.cnyes.com/news/id/6077644  \n",
      "3  https://news.cnyes.com/news/id/6077607  \n",
      "4  https://news.cnyes.com/news/id/6077754  \n",
      "\n",
      "数据已保存到 cnyes_news_20250726_142439.csv\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "import json\n",
    "import time\n",
    "from datetime import datetime, timedelta\n",
    "\n",
    "# 计算正确的时间戳\n",
    "# 结束时间设为当前时间\n",
    "end_time = int(time.time())\n",
    "# 开始时间设为30天前\n",
    "start_time = end_time - (30 * 24 * 60 * 60)  # 30天的秒数\n",
    "\n",
    "print(f\"使用时间范围: 从 {datetime.fromtimestamp(start_time)} 到 {datetime.fromtimestamp(end_time)}\")\n",
    "\n",
    "url = \"https://api.cnyes.com/media/api/v1/newslist/category/headline\"\n",
    "payload = {\n",
    "    \"page\": 1,  # 从第1页开始\n",
    "    \"limit\": 30,\n",
    "    \"isCategoryHeadline\": 1,\n",
    "    \"startAt\": start_time,\n",
    "    \"endAt\": end_time\n",
    "}\n",
    "\n",
    "try:\n",
    "    print(f\"发送请求: {url}\")\n",
    "    print(f\"参数: {payload}\")\n",
    "    \n",
    "    res = requests.get(url, params=payload)\n",
    "    res.raise_for_status()  # 检查HTTP响应状态\n",
    "    \n",
    "    print(f\"响应状态码: {res.status_code}\")\n",
    "    \n",
    "    # 解析JSON\n",
    "    jd = json.loads(res.text)\n",
    "    \n",
    "    # 检查API响应结构\n",
    "    print(f\"JSON顶级键: {list(jd.keys())}\")\n",
    "    \n",
    "    # 适应不同的JSON结构\n",
    "    if 'items' in jd and 'data' in jd['items']:\n",
    "        # 原始预期结构\n",
    "        data = jd['items']['data']\n",
    "    elif 'data' in jd and isinstance(jd['data'], list):\n",
    "        # 数据直接在'data'键下\n",
    "        data = jd['data']\n",
    "    elif 'data' in jd and 'items' in jd['data']:\n",
    "        # 嵌套结构\n",
    "        data = jd['data']['items']\n",
    "    else:\n",
    "        # 其他可能的结构\n",
    "        print(\"无法识别的数据结构，显示完整响应:\")\n",
    "        print(jd)\n",
    "        data = []\n",
    "    \n",
    "    if data:\n",
    "        # 创建DataFrame\n",
    "        df = pd.DataFrame(data)\n",
    "        \n",
    "        print(f\"获取到 {len(df)} 条新闻\")\n",
    "        print(f\"列名: {df.columns.tolist()}\")\n",
    "        \n",
    "        # 选择需要的列（根据实际列名调整）\n",
    "        columns_to_select = [col for col in ['newsId', 'title', 'summary'] if col in df.columns]\n",
    "        \n",
    "        if columns_to_select:\n",
    "            df = df[columns_to_select]\n",
    "            \n",
    "            # 添加链接列（如果有newsId列）\n",
    "            if 'newsId' in df.columns:\n",
    "                df['link'] = df['newsId'].apply(lambda x: f'https://news.cnyes.com/news/id/{x}')\n",
    "                \n",
    "            # 显示结果\n",
    "            print(\"\\n新闻列表预览:\")\n",
    "            print(df.head())\n",
    "            \n",
    "            # 保存到CSV\n",
    "            csv_filename = f\"cnyes_news_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n",
    "            df.to_csv(csv_filename, index=False, encoding='utf-8-sig')\n",
    "            print(f\"\\n数据已保存到 {csv_filename}\")\n",
    "        else:\n",
    "            print(\"在返回的数据中找不到所需的列\")\n",
    "    else:\n",
    "        print(\"没有找到新闻数据\")\n",
    "    \n",
    "except requests.exceptions.RequestException as e:\n",
    "    print(f\"请求错误: {e}\")\n",
    "except json.JSONDecodeError as e:\n",
    "    print(f\"JSON解析错误: {e}\")\n",
    "    print(f\"响应内容: {res.text}\")\n",
    "except Exception as e:\n",
    "    print(f\"其他错误: {e}\")\n",
    "    import traceback\n",
    "    traceback.print_exc()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0eff0801-a29b-42d9-abfc-dd1da1c03bdf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The following commands were written to file `3.py`:\n",
      "import requests\n",
      "import pandas as pd\n",
      "import json\n",
      "import time\n",
      "from datetime import datetime, timedelta\n",
      "\n",
      "# 计算正确的时间戳\n",
      "# 结束时间设为当前时间\n",
      "end_time = int(time.time())\n",
      "# 开始时间设为30天前\n",
      "start_time = end_time - (30 * 24 * 60 * 60)  # 30天的秒数\n",
      "\n",
      "print(f\"使用时间范围: 从 {datetime.fromtimestamp(start_time)} 到 {datetime.fromtimestamp(end_time)}\")\n",
      "\n",
      "url = \"https://api.cnyes.com/media/api/v1/newslist/category/headline\"\n",
      "payload = {\n",
      "    \"page\": 1,  # 从第1页开始\n",
      "    \"limit\": 30,\n",
      "    \"isCategoryHeadline\": 1,\n",
      "    \"startAt\": start_time,\n",
      "    \"endAt\": end_time\n",
      "}\n",
      "\n",
      "try:\n",
      "    print(f\"发送请求: {url}\")\n",
      "    print(f\"参数: {payload}\")\n",
      "    \n",
      "    res = requests.get(url, params=payload)\n",
      "    res.raise_for_status()  # 检查HTTP响应状态\n",
      "    \n",
      "    print(f\"响应状态码: {res.status_code}\")\n",
      "    \n",
      "    # 解析JSON\n",
      "    jd = json.loads(res.text)\n",
      "    \n",
      "    # 检查API响应结构\n",
      "    print(f\"JSON顶级键: {list(jd.keys())}\")\n",
      "    \n",
      "    # 适应不同的JSON结构\n",
      "    if 'items' in jd and 'data' in jd['items']:\n",
      "        # 原始预期结构\n",
      "        data = jd['items']['data']\n",
      "    elif 'data' in jd and isinstance(jd['data'], list):\n",
      "        # 数据直接在'data'键下\n",
      "        data = jd['data']\n",
      "    elif 'data' in jd and 'items' in jd['data']:\n",
      "        # 嵌套结构\n",
      "        data = jd['data']['items']\n",
      "    else:\n",
      "        # 其他可能的结构\n",
      "        print(\"无法识别的数据结构，显示完整响应:\")\n",
      "        print(jd)\n",
      "        data = []\n",
      "    \n",
      "    if data:\n",
      "        # 创建DataFrame\n",
      "        df = pd.DataFrame(data)\n",
      "        \n",
      "        print(f\"获取到 {len(df)} 条新闻\")\n",
      "        print(f\"列名: {df.columns.tolist()}\")\n",
      "        \n",
      "        # 选择需要的列（根据实际列名调整）\n",
      "        columns_to_select = [col for col in ['newsId', 'title', 'summary'] if col in df.columns]\n",
      "        \n",
      "        if columns_to_select:\n",
      "            df = df[columns_to_select]\n",
      "            \n",
      "            # 添加链接列（如果有newsId列）\n",
      "            if 'newsId' in df.columns:\n",
      "                df['link'] = df['newsId'].apply(lambda x: f'https://news.cnyes.com/news/id/{x}')\n",
      "                \n",
      "            # 显示结果\n",
      "            print(\"\\n新闻列表预览:\")\n",
      "            print(df.head())\n",
      "            \n",
      "            # 保存到CSV\n",
      "            csv_filename = f\"cnyes_news_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n",
      "            df.to_csv(csv_filename, index=False, encoding='utf-8-sig')\n",
      "            print(f\"\\n数据已保存到 {csv_filename}\")\n",
      "        else:\n",
      "            print(\"在返回的数据中找不到所需的列\")\n",
      "    else:\n",
      "        print(\"没有找到新闻数据\")\n",
      "    \n",
      "except requests.exceptions.RequestException as e:\n",
      "    print(f\"请求错误: {e}\")\n",
      "except json.JSONDecodeError as e:\n",
      "    print(f\"JSON解析错误: {e}\")\n",
      "    print(f\"响应内容: {res.text}\")\n",
      "except Exception as e:\n",
      "    print(f\"其他错误: {e}\")\n",
      "    import traceback\n",
      "    traceback.print_exc()\n"
     ]
    }
   ],
   "source": [
    "%save 3.py 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "c92d7fc5-6032-4d2d-9622-85fe1ff431c2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:anaconda3]",
   "language": "python",
   "name": "conda-env-anaconda3-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
